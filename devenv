#!/bin/bash

# Work with the utf8test docker build environments.  Type devenv with
# no arguments for usage information.

action=$1
platform=$2

# Make sure we're not running inside the docker container.
if [[ ! -z "${utf8tests_env}" ]]; then
  echo "Error: run on the host not in the docker container."
  exit
fi

function showUsage() {
  echo "Run, list or delete a development environment (debian or ubuntu)."
  echo "Specify the os and the action. For example to run debian:"
  echo ""
  echo "./devenv run debian"
  echo ""
  exit
}

case $platform in
  debian)
    ;;
  ubuntu)
    ;;
  *)
    echo "Error: invalid platform."
    showUsage
    ;;
esac

project="utf8tests"
containerHome="/home/utf8tester/utf8tests"

projectImage="$project-image-$platform"
projectContainer="$project-container-$platform"
rootDir=$(pwd)

dockerFolder=$rootDir/env/$platform
dockerFile=$dockerFolder/Dockerfile

function runMe() {
  ## Create the docker image or run the container.

  # Create the image if missing.
  imageExists=$(docker inspect $projectImage 2>/dev/null | grep "Id" | grep "sha256:")
  if [[ "${imageExists}" == "" ]]; then

    echo "The $projectImage does not exist, creating it..."

    # docker build --no-cache --tag=$projectImage $dockerFolder
    docker build --tag=$projectImage $dockerFolder

    echo ""
    echo "Done: If no errors, run again to run the container."
    exit

  else

    # Run the container.
    status=$(docker inspect $projectContainer 2>/dev/null | grep Status)
    # mapports='-p 127.0.0.1:8000:8000'
    mapports=''

    case $status in
      *running*)
        echo "The $projectContainer is running, attaching to it..."
        docker attach $projectContainer
        ;;
      *exited*)
        echo "The $projectContainer exists but its not running, starting it..."
        docker start -ai $projectContainer
        ;;
      *)
        echo "The $projectContainer does not exist, creating it..."

        # Share the host's folder with the container.
        shared_option="-v $rootDir:$containerHome"

        docker run $mapports --name=$projectContainer -it $shared_option $projectImage
        ;;
    esac

  fi
}

function deleteMe() {
  ## Delete the container and image.

  # Delete the container if it exists and isn't running.
  status=$(docker inspect $projectContainer 2>/dev/null | grep Status)
  case $status in
    *running*)
      echo "The container is running, exit it and try again."
      exit
      ;;
    *exited*)
      echo "Deleting the container"
      docker rm $projectContainer 2>&1 >/dev/null
      ;;
  esac

  # Delete the image if it exists.
  imageExists=$(docker inspect $projectImage 2>/dev/null | grep "Id" | grep "sha256:")
  if [[ "${imageExists}" != "" ]]; then
    echo "Deleting the image."
    docker image rm $projectImage 2>&1 >/dev/null
  fi
}

function listMe() {
  ## List the container and image.

  imageStatus=$(docker inspect $projectImage 2>/dev/null)
  if [[ "${imageStatus}" == "[]" ]]; then
    echo "no $projectImage"
  else
    echo "The $projectImage exists."
  fi

  containerStatus=$(docker inspect $projectContainer 2>/dev/null )
  if [[ "${containerStatus}" == "[]" ]]; then
    echo "no $projectContainer"
  else
    echo "The $projectContainer exists."
  fi
}


# main


# Verify we are running in the root folder by looking for the Docker
# file.
if [ ! -s "$dockerFile" ]; then
  echo "Error: run from the root folder."
  exit
fi

case $action in
  d | delete)
    deleteMe
    ;;
  l | list)
    listMe
    ;;
  r | run)
    runMe
    ;;
  *)
    echo "Error: invalid action."
    showUsage
    ;;
esac


